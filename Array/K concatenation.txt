Question -
ou are given an array A with size N (indexed from 0) and an integer K. Let's define another array B with size N · K as the array that's formed by concatenating K copies of array A.

For example, if A = {1, 2} and K = 3, then B = {1, 2, 1, 2, 1, 2}.

You have to find the maximum subarray sum of the array B. Fomally, you should compute the maximum value of Bi + Bi+1 + Bi+2 + ... + Bj, where 0 ≤ i ≤ j < N · K.

-------------------------------------------------------------------
Solution -
#include <bits/stdc++.h>
using namespace std;

void kcon(vector<int> v,int n, int k)
{
    while(k--){
        for(int i=0;i<n;i++){
            v.push_back(v[i]);
        }
    }
}

int maximumsum(vector<int>v){
    int m=v.size();
    int maximum=v[0],maxuptil=v[0];
    
    for(int i=1;i<m;i++){
        maxuptil=max(v[i],v[i]+maxuptil);
        if(maxuptil>maximum){
            maximum=maxuptil;
        };
    }
    return maximum;
}

int main() {
	int t;
	cin>>t;
	while(t--){
	    int n;int k;
	    cin>>n>>k;
	    vector<int> v;
	    int x;
	    for(int i=0;i<n;i++){
	        cin>>x;
	        v.push_back(x);
	    }
	    kcon(v,n,k);
	    cout<<maximumsum(v)<<endl;
	}
	return 0;
}
