Question -
ou are given an array A with size N (indexed from 0) and an integer K. Let's define another array B with size N · K as the array that's formed by concatenating K copies of array A.

For example, if A = {1, 2} and K = 3, then B = {1, 2, 1, 2, 1, 2}.

You have to find the maximum subarray sum of the array B. Fomally, you should compute the maximum value of Bi + Bi+1 + Bi+2 + ... + Bj, where 0 ≤ i ≤ j < N · K.

-------------------------------------------------------------------
Solution -
#include <bits/stdc++.h>
using namespace std;


int maximumSum(int arr[],int k,int n){
    vector<int> arrb;
    int nk=n*k;
    for(int i=0;i<nk;i++){
        arrb.push_back(arr[i%n]);
    }
    // for(int i=0;i<arrb.size();i++){
    //     cout<<arrb[i]<<" ";
    // }
    // cout<<endl;
    int maxSum=INT_MIN;
    int currSum=arrb[0];
    for(int i=1;i<arrb.size();i++){
        if(arrb[i]<currSum+arrb[i]){
            currSum+=arrb[i];
        }
        else{
            currSum=arrb[i];
        }
        if(currSum>maxSum){
            maxSum=currSum;
        }
    }
    return maxSum;
}

int main()
{
    // int t;
    // cin>>t;
    // while(t--){
    //     int n,k;
    //     cin>>n>>k;
    //     int arr[n];
    //     for(int i=0;i<n;i++){
    //         cin>>arr[n];
    //     }
    //     cout<<maximumSum(arr,k,n)<<" ";
    // }
    int n=2;
    int arr[n]={1,2};
    int k=3;
    cout<<maximumSum(arr,k,n);
    
    
    
    return 0;
}

